Track My Impact — Run Instructions (VS Code)

Objective:
Guide developers to run the FastAPI backend and Next.js frontend locally using Visual Studio Code on macOS/Linux.

--------------------------------------------------------------------
1. Requirements
--------------------------------------------------------------------
- Node.js v18.18+ and npm
- Python 3.11+
- Visual Studio Code
- VS Code extensions:
  - Python (Microsoft)
  - ESLint (optional)
- Homebrew (recommended for macOS package management)

--------------------------------------------------------------------
2. Initial Setup
--------------------------------------------------------------------
Open Project in VS Code:
1. Open VS Code → File → Open Folder… → select the repo root.
2. Open an integrated terminal: Terminal → New Terminal.

Prerequisites Check:
    brew --version     # verifies Homebrew
    node -v            # confirm Node ≥18.18
    python3 --version  # ensure Python 3.11+

If missing/outdated:
    brew install node
    brew install python@3.11

--------------------------------------------------------------------
3. Backend (FastAPI)
--------------------------------------------------------------------
One-time Setup:
    cd backend
    python -m venv venv
    source venv/bin/activate
    pip install -U pip setuptools wheel
    pip install -r requirements.txt
    python init_database.py

Run Backend:
    cd backend
    source venv/bin/activate
    uvicorn app.main:app --host 127.0.0.1 --port 8000 --loop asyncio --http h11

Health check:
    curl http://127.0.0.1:8000/health

Default credentials:
- Username: test
- Password: test123

--------------------------------------------------------------------
4. Frontend (Next.js)
--------------------------------------------------------------------
One-time Setup:
    cd track-my-impact
    npm install

Run Frontend:
    export NEXT_PUBLIC_API_BASE_URL=http://127.0.0.1:8000
    npm run dev

Open the app:
http://localhost:3000

--------------------------------------------------------------------
5. AI Classifier Integration
--------------------------------------------------------------------
- Place CNN model in: track-my-impact/public/model/waste_model.keras
- Place labels file in: track-my-impact/public/labels.json

Self-check pages:
- Model:   http://localhost:3000/tools/model-check
- Mapping: http://localhost:3000/tools/mapping-check

Adjust preprocessing before npm run dev:
    export NEXT_PUBLIC_TMI_TFJS_NORM=-1_1   # or 0_1 if trained with [0,1] scaling
    export NEXT_PUBLIC_TMI_TFJS_INPUT=224   # input size

Convert .keras to TFJS:
    cd track-my-impact
    pip install tensorflowjs
    tensorflowjs_converter --input_format=keras public/model/waste_model.keras public/model

Optional: Save .h5 version
    python - <<'PY'
    import tensorflow as tf
    m = tf.keras.models.load_model('backend/app/models/waste_model.keras', compile=False)
    m.save('backend/app/models/waste_model.h5')
    print('Saved H5 at backend/app/models/waste_model.h5')
    PY

--------------------------------------------------------------------
6. Troubleshooting
--------------------------------------------------------------------
- Port 8000 in use:
    lsof -ti tcp:8000 | xargs kill -9

- macOS crash (uvloop/httptools):
    Use --loop asyncio --http h11

- CORS errors:
    Ensure NEXT_PUBLIC_API_BASE_URL points to backend.
    Add frontend origin (e.g., http://localhost:3000) to ALLOWED_ORIGINS.

Test CORS:
    curl -i -X OPTIONS http://127.0.0.1:8000/api/auth/login       -H "Origin: http://127.0.0.1:3000"       -H "Access-Control-Request-Method: POST"

- Next.js errors:
    Ensure package.json has "type": "module".
    Clear/reinstall:
        rm -rf track-my-impact/node_modules track-my-impact/.next
        (cd track-my-impact && npm install)
    Pin Next.js version if needed: "next": "15.3.2"

- Python deps missing:
    cd backend
    source venv/bin/activate
    pip install -r requirements.txt

- Enable backend AI inference:
    pip install tensorflow pillow numpy
    export AI_KERAS_MODEL_PATH=/full/path/to/waste_model.keras

Endpoint: POST /api/ai/classify

--------------------------------------------------------------------
7. Testing
--------------------------------------------------------------------
Backend tests:
    pytest

Frontend checks:
    npx tsc --noEmit
    npm run lint
    npm test


